// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ['/Users/davidpoves/.conda/envs/TFG-V2/include', '
//                                  /Users/davidpoves/.conda/envs/TFG-V2/include/eigen
//                                  3', '/Users/davidpoves/.conda/envs/TFG-V2/include'
//                                  ]
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   False
//  format:                         'ufc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  no-evaluate_basis_derivatives:  True
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#include "ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_cell_integral_main_10::ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_cell_integral_main_10() : ufc::cell_integral()
{

}

ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_cell_integral_main_10::~ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_cell_integral_main_10()
{

}

const std::vector<bool> & ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_cell_integral_main_10::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true});
return enabled;
}

void ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_cell_integral_main_10::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 3
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 3
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           3
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights6[6] = { 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE10_C0_D01_Q6[1][6][5] =
        { { { 0.5638439637084868, -0.07226652578787457, 2.636110489496353, -0.4915774379206048, -2.636110489496369 },
            { 0.07226652578787116, -0.5638439637084912, 2.636110489496354, 0.4915774379206271, -2.636110489496369 },
            { 0.5638439637084866, 1.63611048949637, 0.9277334742121085, -2.19995445320485, -0.9277334742121235 },
            { -1.636110489496372, -0.5638439637084913, 0.9277334742121129, 2.199954453204868, -0.9277334742121237 },
            { 0.07226652578787045, 1.63611048949637, 0.4361560362914935, -1.708377015284234, -0.4361560362915074 },
            { -1.636110489496373, -0.07226652578787471, 0.4361560362914967, 1.708377015284252, -0.4361560362915074 } } };
    alignas(32) static const double FE10_C0_D10_Q6[1][6][5] =
        { { { 0.5638439637084943, 1.636110489496368, 0.9277334742121224, -0.9277334742121224, -2.199954453204862 },
            { 0.07226652578787797, 1.636110489496368, 0.4361560362915067, -0.4361560362915067, -1.708377015284245 },
            { 0.5638439637084921, -0.07226652578787626, 2.636110489496364, -2.636110489496364, -0.4915774379206156 },
            { -1.636110489496368, -0.07226652578787818, 0.4361560362915063, -0.4361560362915063, 1.708377015284246 },
            { 0.07226652578787539, -0.5638439637084925, 2.636110489496364, -2.636110489496364, 0.4915774379206174 },
            { -1.636110489496368, -0.5638439637084939, 0.9277334742121225, -0.9277334742121225, 2.199954453204862 } } };
    alignas(32) static const double FE16_C0_D01_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE16_C0_Q6[1][6][3] =
        { { { 0.1090390090728769, 0.659027622374092, 0.231933368553031 },
            { 0.231933368553031, 0.659027622374092, 0.109039009072877 },
            { 0.109039009072877, 0.231933368553031, 0.6590276223740918 },
            { 0.659027622374092, 0.231933368553031, 0.109039009072877 },
            { 0.231933368553031, 0.109039009072877, 0.6590276223740918 },
            { 0.659027622374092, 0.1090390090728769, 0.231933368553031 } } };
    alignas(32) static const double FE18_C0_Q6[1][6][6] =
        { { { nan, nan, nan, nan, nan, nan },
            { nan, nan, nan, nan, nan, nan },
            { nan, nan, nan, nan, nan, nan },
            { nan, nan, nan, nan, nan, nan },
            { nan, nan, nan, nan, nan, nan },
            { nan, nan, nan, nan, nan, nan } } };
    // Unstructured piecewise computations
    const double J_c3 = coordinate_dofs[1] * FE16_C0_D01_Q6[0][0][0] + coordinate_dofs[5] * FE16_C0_D01_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE16_C0_D01_Q6[0][0][0] + coordinate_dofs[2] * FE16_C0_D01_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE16_C0_D01_Q6[0][0][0] + coordinate_dofs[4] * FE16_C0_D01_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE16_C0_D01_Q6[0][0][0] + coordinate_dofs[3] * FE16_C0_D01_Q6[0][0][1];
    alignas(32) double sp[18];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c3 / sp[2];
    sp[4] = -1 * J_c2 / sp[2];
    sp[5] = w[0][0] * sp[3];
    sp[6] = w[0][0] * sp[4];
    sp[7] = w[0][1] * sp[3];
    sp[8] = w[0][1] * sp[4];
    sp[9] = J_c0 / sp[2];
    sp[10] = -1 * J_c1 / sp[2];
    sp[11] = w[1][0] * sp[10];
    sp[12] = w[1][0] * sp[9];
    sp[13] = w[1][1] * sp[10];
    sp[14] = w[1][1] * sp[9];
    sp[15] = std::abs(sp[2]);
    sp[16] = -1 * w[0][0] * sp[15];
    sp[17] = -1 * w[0][1] * sp[15];
    alignas(32) double BF0[5][6] = {};
    alignas(32) double BF1[5][6] = {};
    alignas(32) double BF2[5][6] = {};
    alignas(32) double BF3[5][6] = {};
    for (int iq = 0; iq < 6; ++iq)
    {
        // Quadrature loop body setup (num_points=6)
        // Unstructured varying computations for num_points=6
        const double x_c0 = coordinate_dofs[0] * FE16_C0_Q6[0][iq][0] + coordinate_dofs[2] * FE16_C0_Q6[0][iq][1] + coordinate_dofs[4] * FE16_C0_Q6[0][iq][2];
        alignas(32) double sv6[16];
        sv6[0] = x_c0 * sp[5];
        sv6[1] = x_c0 * sp[6];
        sv6[2] = x_c0 * sp[7];
        sv6[3] = x_c0 * sp[8];
        sv6[4] = x_c0 * sp[11];
        sv6[5] = x_c0 * sp[12];
        sv6[6] = x_c0 * sp[13];
        sv6[7] = x_c0 * sp[14];
        sv6[8] = sv6[0] + sv6[4];
        sv6[9] = sv6[5] + sv6[1];
        sv6[10] = sv6[2] + sv6[6];
        sv6[11] = sv6[7] + sv6[3];
        sv6[12] = -1 * sv6[8] * sp[15];
        sv6[13] = -1 * sv6[9] * sp[15];
        sv6[14] = -1 * sv6[10] * sp[15];
        sv6[15] = -1 * sv6[11] * sp[15];
        const double fw0 = sv6[12] * weights6[iq];
        alignas(32) double TF0[5];
        for (int i = 0; i < 5; ++i)
            TF0[i] = fw0 * FE10_C0_D10_Q6[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE18_C0_Q6[0][iq][j];
        const double fw1 = sv6[13] * weights6[iq];
        alignas(32) double TF1[5];
        for (int i = 0; i < 5; ++i)
            TF1[i] = fw1 * FE10_C0_D01_Q6[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF1[i][j] += TF1[i] * FE18_C0_Q6[0][iq][j];
        const double fw2 = sv6[14] * weights6[iq];
        alignas(32) double TF2[5];
        for (int i = 0; i < 5; ++i)
            TF2[i] = fw2 * FE10_C0_D10_Q6[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF2[i][j] += TF2[i] * FE18_C0_Q6[0][iq][j];
        const double fw3 = sv6[15] * weights6[iq];
        alignas(32) double TF3[5];
        for (int i = 0; i < 5; ++i)
            TF3[i] = fw3 * FE10_C0_D01_Q6[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE18_C0_Q6[0][iq][j];
    }
    A[0] = nan * sp[16];
    A[1] = nan * sp[16];
    A[2] = nan * sp[16];
    A[3] = nan * sp[16];
    A[4] = nan * sp[16];
    A[5] = nan * sp[16];
    A[6] = nan * sp[16];
    A[7] = nan * sp[16];
    A[8] = nan * sp[16];
    A[9] = nan * sp[16];
    A[10] = nan * sp[16];
    A[11] = nan * sp[16];
    A[12] = nan * sp[16];
    A[13] = nan * sp[16];
    A[14] = nan * sp[16];
    A[15] = nan * sp[16];
    A[16] = nan * sp[16];
    A[17] = nan * sp[16];
    A[18] = nan * sp[16];
    A[19] = nan * sp[16];
    A[20] = nan * sp[16];
    A[21] = nan * sp[16];
    A[22] = nan * sp[16];
    A[23] = nan * sp[16];
    A[24] = nan * sp[16];
    A[25] = nan * sp[16];
    A[26] = nan * sp[16];
    A[27] = nan * sp[16];
    A[28] = nan * sp[16];
    A[29] = nan * sp[16];
    A[30] = nan * sp[16];
    A[31] = nan * sp[16];
    A[32] = nan * sp[16];
    A[33] = nan * sp[16];
    A[34] = nan * sp[16];
    A[35] = nan * sp[16];
    A[36] = nan * sp[17];
    A[37] = nan * sp[17];
    A[38] = nan * sp[17];
    A[39] = nan * sp[17];
    A[40] = nan * sp[17];
    A[41] = nan * sp[17];
    A[42] = nan * sp[17];
    A[43] = nan * sp[17];
    A[44] = nan * sp[17];
    A[45] = nan * sp[17];
    A[46] = nan * sp[17];
    A[47] = nan * sp[17];
    A[48] = nan * sp[17];
    A[49] = nan * sp[17];
    A[50] = nan * sp[17];
    A[51] = nan * sp[17];
    A[52] = nan * sp[17];
    A[53] = nan * sp[17];
    A[54] = nan * sp[17];
    A[55] = nan * sp[17];
    A[56] = nan * sp[17];
    A[57] = nan * sp[17];
    A[58] = nan * sp[17];
    A[59] = nan * sp[17];
    A[60] = nan * sp[17];
    A[61] = nan * sp[17];
    A[62] = nan * sp[17];
    A[63] = nan * sp[17];
    A[64] = nan * sp[17];
    A[65] = nan * sp[17];
    A[66] = nan * sp[17];
    A[67] = nan * sp[17];
    A[68] = nan * sp[17];
    A[69] = nan * sp[17];
    A[70] = nan * sp[17];
    A[71] = nan * sp[17];
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[6 * DM0[i] + j] += BF0[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[6 * DM1[i] + j] += BF1[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[6 * DM2[i] + j] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[6 * DM3[i] + j] += BF3[i][j];
}

extern "C" DLL_EXPORT ufc::cell_integral * create_ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_cell_integral_main_10()
{
  return new ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_cell_integral_main_10();
}


ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::~ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main()
{
    // Do nothing
}

const char * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::signature() const
{
    return "9176713855dca55c02c2cb7a811ac00dd0e1e6821fe86ffaf178a4f20805017e40b9f630be9ff22a8cc8b31ac9ff37f3e15bcf9bd5f5089074af1a40bff37cdf";
}

std::size_t ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::rank() const
{
    return 2;
}

std::size_t ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::num_coefficients() const
{
    return 2;
}

std::size_t ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::original_coefficient_position(std::size_t i) const
{
    if (i >= 2)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1};
    return position[i];
}

ufc::finite_element * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_b4ecfba35aca7b84fe255e45210a32ffe34a9505_finite_element_main();
}

ufc::dofmap * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_b4ecfba35aca7b84fe255e45210a32ffe34a9505_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_coordinate_mapping() const
{
    return create_ffc_coordinate_mapping_320e7bb19f85d3354b86782859cccae2ce69cc0e_coordinate_mapping_main();
}

ufc::finite_element * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_536a3af10af771a83bb23b167f666d20b9d9874a_finite_element_main();
    case 1:
        return create_ffc_element_33e026fc6d51b195cac9f6ca2618854488f4f317_finite_element_main();
    case 2:
        return create_ffc_element_b291e4d5c946801062f5bb4f3191048e4ae4be13_finite_element_main();
    case 3:
        return create_ffc_element_b291e4d5c946801062f5bb4f3191048e4ae4be13_finite_element_main();
    default:
        return nullptr;
    }
}

ufc::dofmap * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_536a3af10af771a83bb23b167f666d20b9d9874a_dofmap_main();
    case 1:
        return create_ffc_element_33e026fc6d51b195cac9f6ca2618854488f4f317_dofmap_main();
    case 2:
        return create_ffc_element_b291e4d5c946801062f5bb4f3191048e4ae4be13_dofmap_main();
    case 3:
        return create_ffc_element_b291e4d5c946801062f5bb4f3191048e4ae4be13_dofmap_main();
    default:
        return nullptr;
    }
}

std::size_t ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::max_cell_subdomain_id() const
{
    return 11;
}

std::size_t ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::has_cell_integrals() const
{
    return true;
}

bool ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    switch (subdomain_id)
    {
    case 10:
        return create_ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_cell_integral_main_10();
    default:
        return nullptr;
    }
}

ufc::exterior_facet_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_default_cell_integral() const
{
    return nullptr;
}

ufc::exterior_facet_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main::create_default_overlap_integral() const
{
    return nullptr;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main()
{
  return new ffc_form_27f07cc4b9c1af7d8e6204ae74c57010d8aa299a_form_main();
}

